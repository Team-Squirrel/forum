Application Back-end (Server) - up to 40%

At least 5 different public dynamic web pages
 - home page (with list of recently active threads)
 - browse threads (with option to view "newest", "unaswered")
 - browse users
 - view thread
 - channels (again some sort/filter options) -- the sort/filtering could be done with AJAX calls
 - login
 - register page
At least 3 different private (authenticated) dynamic web pages
  - create new thread
  - view profile (will list info for user, like his threads and his replies in threads)
   - 3 tabs
     - info or profile - will show info and stats for the user
      - list opened threads from you
      - list threads that you have commented on
     - notifications - will show notifications (unread ones on top)
     - settings - edit info for the user (visible only if the user is logged in)
At least 5 different public RESTful routes for AJAX
 - get threads
 - get users
 - get channels
At least 1 private (authenticated) route for AJAX
 - up/down vote a thread
 - select correct reply
Use Express for the server
Use an MV-* pattern
Use MongoDB
 - models
  - user
  - thread
  - reply
  - channel
Use Passport - for managing users
Implement WebSockets
 - Notifcations about up/down vote, answer in discution you are interested in
 - The notifications should be sent even if the user is not currently connected to the socket (like fb notifications)